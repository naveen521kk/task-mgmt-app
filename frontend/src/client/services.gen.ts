// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { LoginForAccessTokenTokenPostData, LoginForAccessTokenTokenPostResponse, ReadUsersMeUsersMeGetResponse, ReadOwnTasksTasksGetResponse, CreateTaskForUserTasksPostData, CreateTaskForUserTasksPostResponse, ReadTaskTasksTaskIdGetData, ReadTaskTasksTaskIdGetResponse, DeleteTaskTasksTaskIdDeleteData, DeleteTaskTasksTaskIdDeleteResponse, UpdateTaskTasksTaskIdPutData, UpdateTaskTasksTaskIdPutResponse, CreateUserUsersPostData, CreateUserUsersPostResponse } from './types.gen';

/**
 * Login For Access Token
 * @param data The data for the request.
 * @param data.formData
 * @returns Token Successful Response
 * @throws ApiError
 */
export const loginForAccessTokenTokenPost = (data: LoginForAccessTokenTokenPostData): CancelablePromise<LoginForAccessTokenTokenPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/token',
    formData: data.formData,
    mediaType: 'application/x-www-form-urlencoded',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Users Me
 * @returns User Successful Response
 * @throws ApiError
 */
export const readUsersMeUsersMeGet = (): CancelablePromise<ReadUsersMeUsersMeGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/me/'
}); };

/**
 * Read Own Tasks
 * @returns Task Successful Response
 * @throws ApiError
 */
export const readOwnTasksTasksGet = (): CancelablePromise<ReadOwnTasksTasksGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/tasks/'
}); };

/**
 * Create Task For User
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Task Successful Response
 * @throws ApiError
 */
export const createTaskForUserTasksPost = (data: CreateTaskForUserTasksPostData): CancelablePromise<CreateTaskForUserTasksPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/tasks/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Task
 * @param data The data for the request.
 * @param data.taskId
 * @returns Task Successful Response
 * @throws ApiError
 */
export const readTaskTasksTaskIdGet = (data: ReadTaskTasksTaskIdGetData): CancelablePromise<ReadTaskTasksTaskIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/tasks/{task_id}',
    path: {
        task_id: data.taskId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Task
 * @param data The data for the request.
 * @param data.taskId
 * @returns Task Successful Response
 * @throws ApiError
 */
export const deleteTaskTasksTaskIdDelete = (data: DeleteTaskTasksTaskIdDeleteData): CancelablePromise<DeleteTaskTasksTaskIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/tasks/{task_id}',
    path: {
        task_id: data.taskId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Task
 * @param data The data for the request.
 * @param data.taskId
 * @param data.requestBody
 * @returns Task Successful Response
 * @throws ApiError
 */
export const updateTaskTasksTaskIdPut = (data: UpdateTaskTasksTaskIdPutData): CancelablePromise<UpdateTaskTasksTaskIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/tasks/{task_id}',
    path: {
        task_id: data.taskId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create User
 * @param data The data for the request.
 * @param data.requestBody
 * @returns User Successful Response
 * @throws ApiError
 */
export const createUserUsersPost = (data: CreateUserUsersPostData): CancelablePromise<CreateUserUsersPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };