// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_for_access_token_token_post = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Task = {
    title: string;
    description?: string | null;
    due_date?: string | null;
    id: string;
    owner_id: string;
    updated_at: string;
    created_at: string;
};

export type TaskCreate = {
    title: string;
    description?: string | null;
    due_date?: string | null;
};

export type Token = {
    access_token: string;
    token_type: string;
};

export type User = {
    email: string;
    id: string;
    items?: Array<Task>;
};

export type UserCreate = {
    email: string;
    password: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginForAccessTokenTokenPostData = {
    formData: Body_login_for_access_token_token_post;
};

export type LoginForAccessTokenTokenPostResponse = Token;

export type ReadUsersMeUsersMeGetResponse = User;

export type ReadOwnItemsUsersMeItemsGetResponse = Array<Task>;

export type CreateTaskForUserUsersMeTasksPostData = {
    requestBody: TaskCreate;
};

export type CreateTaskForUserUsersMeTasksPostResponse = Task;

export type CreateUserUsersPostData = {
    requestBody: UserCreate;
};

export type CreateUserUsersPostResponse = User;

export type CreateTaskForUserUsersUserIdTasksPostData = {
    requestBody: TaskCreate;
    userId: string;
};

export type CreateTaskForUserUsersUserIdTasksPostResponse = Task;

export type $OpenApiTs = {
    '/token': {
        post: {
            req: LoginForAccessTokenTokenPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Token;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/me/': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: User;
            };
        };
    };
    '/users/me/items/': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<Task>;
            };
        };
    };
    '/users/me/tasks/': {
        post: {
            req: CreateTaskForUserUsersMeTasksPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Task;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/': {
        post: {
            req: CreateUserUsersPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: User;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/{user_id}/tasks/': {
        post: {
            req: CreateTaskForUserUsersUserIdTasksPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Task;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};